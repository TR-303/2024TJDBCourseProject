// <auto-generated />
using System;
using FilmCompanyManagement.Server.EntityFrame;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace FilmCompanyManagement.Server.Migrations
{
    [DbContext(typeof(FCMDbContext))]
    [Migration("20240710080840_re")]
    partial class re
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.Property<string>("EmployeesEmployeeID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProjectsProjectID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("EmployeesEmployeeID", "ProjectsProjectID");

                    b.HasIndex("ProjectsProjectID");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("FileProject", b =>
                {
                    b.Property<string>("FilesFileID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProjectsProjectID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("FilesFileID", "ProjectsProjectID");

                    b.HasIndex("ProjectsProjectID");

                    b.ToTable("FileProject");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Model.Intern", b =>
                {
                    b.Property<string>("InternId")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("InternId");

                    b.Property<string>("Advicer")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("InternshipEndDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime>("InternshipStartDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("InternId");

                    b.ToTable("Intern");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Model.Position", b =>
                {
                    b.Property<string>("PositionTitle")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.HasKey("PositionTitle");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Model.Recruiter", b =>
                {
                    b.Property<string>("RecruiterId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Email")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Gender")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("InterviewStage")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<int>("InterviewerId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Position")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("State")
                        .HasColumnType("BOOLEAN");

                    b.HasKey("RecruiterId");

                    b.ToTable("Recruiter");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Attendance", b =>
                {
                    b.Property<string>("AttendanceId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<TimeSpan?>("CheckInTime")
                        .HasColumnType("INTERVAL DAY(8) TO SECOND(7)");

                    b.Property<TimeSpan?>("CheckOutTime")
                        .HasColumnType("INTERVAL DAY(8) TO SECOND(7)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsEarlyLeave")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsLate")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsOnLeave")
                        .HasColumnType("BOOLEAN");

                    b.Property<bool>("IsOvertime")
                        .HasColumnType("BOOLEAN");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AttendanceId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Bill", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("NVARCHAR2(12)");

                    b.Property<string>("A_Id")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("Id");

                    b.HasIndex("A_Id");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Customer", b =>
                {
                    b.Property<string>("CustomerID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR2(30)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("NVARCHAR2(2)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("NVARCHAR2(15)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Department", b =>
                {
                    b.Property<string>("DeptId")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("DeptId");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("ContactNumber");

                    b.Property<string>("DeptLeaderId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("DeptLeaderId");

                    b.Property<string>("DeptName")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("DeptName");

                    b.Property<string>("ParentDeptId")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("ParentDeptId");

                    b.Property<int>("TotalEmployees")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("TotalEmployees");

                    b.HasKey("DeptId");

                    b.HasIndex("ParentDeptId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Drill", b =>
                {
                    b.Property<string>("DrillId")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("DrillId");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("NVARCHAR2(2000)")
                        .HasColumnName("TeacherId");

                    b.Property<TimeSpan>("TimeSpan")
                        .HasColumnType("INTERVAL DAY(8) TO SECOND(7)");

                    b.HasKey("DrillId");

                    b.ToTable("Drill");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("EmployeeEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("NVARCHAR2(30)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("EmployeePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("NVARCHAR2(15)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("NVARCHAR2(2)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<int>("Salary")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("EmployeeID");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EmployeeAttendance", b =>
                {
                    b.Property<string>("EmpId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("AtdId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("EmpId", "AtdId");

                    b.HasIndex("AtdId");

                    b.ToTable("EmployeeAttendance");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EmployeeDepartment", b =>
                {
                    b.Property<string>("EmpId")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("DeptId")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnOrder(2);

                    b.HasKey("EmpId", "DeptId");

                    b.HasIndex("DeptId");

                    b.ToTable("EmployeeDepartment");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EmployeeDrill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("DrillId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("EmpId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("DrillId");

                    b.HasIndex("EmpId");

                    b.ToTable("EmployeeDrill");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EmployeeKPI", b =>
                {
                    b.Property<string>("EmpId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("KPIID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("EmpId", "KPIID");

                    b.HasIndex("KPIID");

                    b.ToTable("EmployeeKPI");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EquipmentLease", b =>
                {
                    b.Property<string>("ProjectID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("ProjectID");

                    b.HasIndex("CustomerID");

                    b.ToTable("EquipmentLeases", (string)null);
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EquipmentRepair", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("NVARCHAR2(12)");

                    b.Property<string>("B_Id")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(12)");

                    b.Property<string>("D_Id")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR2(100)");

                    b.HasKey("Id");

                    b.HasIndex("B_Id")
                        .IsUnique();

                    b.ToTable("EquipmentRepairs");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.File", b =>
                {
                    b.Property<string>("FileID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<int>("FileSize")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("NVARCHAR2(10)");

                    b.Property<string>("StorageEquipmentId")
                        .HasColumnType("NVARCHAR2(8)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("FileID");

                    b.HasIndex("StorageEquipmentId");

                    b.ToTable("File", (string)null);
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.FinishedProduct", b =>
                {
                    b.Property<string>("OrderID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("FileID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("FileID");

                    b.ToTable("FinishedProducts", (string)null);
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.FundingApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(12)
                        .HasColumnType("NVARCHAR2(12)");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("BillStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("E_Id")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("E_Id");

                    b.ToTable("FundingApplications");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Investment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("NVARCHAR2(8)");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("Bi_Id")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(12)");

                    b.Property<string>("BillStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("C_Id")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Bi_Id")
                        .IsUnique();

                    b.HasIndex("C_Id");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.KPI", b =>
                {
                    b.Property<string>("KPIID")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("KPIID");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("JudgerId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProjectID")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("Result")
                        .HasColumnType("BOOLEAN");

                    b.HasKey("KPIID");

                    b.HasIndex("JudgerId");

                    b.ToTable("KPI");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.PhotoEquipment", b =>
                {
                    b.Property<string>("EquipmentID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("EquipmentModel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("EquipmentID");

                    b.ToTable("PhotoEquipments", (string)null);
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Project", b =>
                {
                    b.Property<string>("ProjectID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("EmployeeID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("ProjectID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.StorageEquipment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("NVARCHAR2(8)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<int>("Stock")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.ToTable("StorageEquipments");
                });

            modelBuilder.Entity("EmployeeProject", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesEmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FileProject", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.File", null)
                        .WithMany()
                        .HasForeignKey("FilesFileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Model.Intern", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Employee", "Employee")
                        .WithOne("Intern")
                        .HasForeignKey("FilmCompanyManagement.Server.EntityFrame.Model.Intern", "InternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Bill", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Account", "Account")
                        .WithMany("Bills")
                        .HasForeignKey("A_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Department", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Department", "ParentDepartment")
                        .WithMany("SubDepartments")
                        .HasForeignKey("ParentDeptId");

                    b.Navigation("ParentDepartment");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EmployeeAttendance", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Attendance", "Attendance")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("AtdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Employee", "Employee")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EmployeeDepartment", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Department", "Department")
                        .WithMany("EmployeeDepartments")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Employee", "Employee")
                        .WithMany("EmployeeDepartments")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EmployeeDrill", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Drill", "Drill")
                        .WithMany("EmployeeDrills")
                        .HasForeignKey("DrillId");

                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Employee", "Employee")
                        .WithMany("EmployeeDrills")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drill");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EmployeeKPI", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Employee", "Employee")
                        .WithMany("EmployeeKPIs")
                        .HasForeignKey("EmpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.KPI", "KPI")
                        .WithMany("EmployeeKPIs")
                        .HasForeignKey("KPIID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EquipmentLease", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Customer", "Customer")
                        .WithMany("EquipmentLeases")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.EquipmentRepair", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Bill", "Bill")
                        .WithOne()
                        .HasForeignKey("FilmCompanyManagement.Server.EntityFrame.Models.EquipmentRepair", "B_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.File", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.StorageEquipment", null)
                        .WithMany("Files")
                        .HasForeignKey("StorageEquipmentId");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.FinishedProduct", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Customer", "Customer")
                        .WithMany("FinishedProducts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.File", "File")
                        .WithMany("FinishedProducts")
                        .HasForeignKey("FileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("File");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.FundingApplication", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("E_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Investment", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Bill", "Bill")
                        .WithOne()
                        .HasForeignKey("FilmCompanyManagement.Server.EntityFrame.Models.Investment", "Bi_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("C_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.KPI", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("JudgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Project", b =>
                {
                    b.HasOne("FilmCompanyManagement.Server.EntityFrame.Models.Customer", "Customer")
                        .WithMany("Projects")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Account", b =>
                {
                    b.Navigation("Bills");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Attendance", b =>
                {
                    b.Navigation("EmployeeAttendances");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Customer", b =>
                {
                    b.Navigation("EquipmentLeases");

                    b.Navigation("FinishedProducts");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Department", b =>
                {
                    b.Navigation("EmployeeDepartments");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Drill", b =>
                {
                    b.Navigation("EmployeeDrills");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.Employee", b =>
                {
                    b.Navigation("EmployeeAttendances");

                    b.Navigation("EmployeeDepartments");

                    b.Navigation("EmployeeDrills");

                    b.Navigation("EmployeeKPIs");

                    b.Navigation("Intern")
                        .IsRequired();
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.File", b =>
                {
                    b.Navigation("FinishedProducts");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.KPI", b =>
                {
                    b.Navigation("EmployeeKPIs");
                });

            modelBuilder.Entity("FilmCompanyManagement.Server.EntityFrame.Models.StorageEquipment", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
